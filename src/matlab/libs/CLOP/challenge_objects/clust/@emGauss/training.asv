function [retDat,algo] =  training(algo,retDat)

x=get_x(retDat);
y=get_y(retDat);

%----------------------------now get the +ve examples and find the mixtures
xp = find(y>0);
x  = x(xp,:);
x = full(x);
[algo.probP algo.priorP] = libem({'X',x},...
                                      {'iterations',algo.IterationsP},...
                                      {'mixtures',algo.mixturesP});  
%eliminate the mixtures with priors less than a threshold value                                      
if (algo.EliminatePriors~=0)
    [algo.probP algo.priorP algo.mixturesP]= ...
                                    Eliminate(algo.probP, algo.priorP, algo.EliminatePriors); 
end                                      
%----------------------------now get the -ve examples and find the mixtures
x = get_x(retDat);
xn = find(y<0);
x  = x(xn,:);
x = full(x);
[algo.probN algo.priorN] = libem({'X',x},...
                                      {'iterations',algo.IterationsN},...
                                      {'mixtures',algo.mixturesN});                                       
% eliminate if necessiry                                  
if (algo.EliminatePriors~=0)
    [algo.probN algo.priorN algo.mixturesN]= ...
                                    Eliminate(algo.probN, algo.priorN, algo.EliminatePriors); 
end                                      
                                  
                                      
%-----------------------------------------find the class probabilities also
[numEx,vDim,oDim,numCls]=get_dim(retDat);
algo.PosPrior = length(xp)/numEx;
algo.NegPrior = length(xn)/numEx;

retDat = test(algo,retDat);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%function to eliminate the priors with value less than a threshold
function [Prob Prior TotalMixtures] = Eliminate(Prob,Prior,threshold)
    x = find(Prior < threshold);
    Prior(x,:) = [];
    Prob(x,:) = [];
    TotalMixtures = length(Prior);